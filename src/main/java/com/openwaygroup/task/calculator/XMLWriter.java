package com.openwaygroup.task.calculator;import org.w3c.dom.Document;import org.w3c.dom.Element;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import javax.xml.transform.OutputKeys;import javax.xml.transform.Transformer;import javax.xml.transform.TransformerException;import javax.xml.transform.TransformerFactory;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;import java.io.File;import java.nio.file.Path;import java.util.LinkedList;import static com.openwaygroup.task.calculator.Main.logger;class XMLWriter {    private static final String ROOT = "simpleCalculator";    private static final String ROOT_CHILD = "expressionResults";    private static final String EXPRESSION_RESULT = "expressionResult";    private static final String RESULT = "result";    static void writeResultToXML(Path path, LinkedList<String> resultList) throws ParserConfigurationException, TransformerException {        try {            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();            Document document = docBuilder.newDocument();            document.setXmlStandalone(true);            Element rootElement = document.createElement(ROOT);            document.appendChild(rootElement);            Element expressionResults = document.createElement(ROOT_CHILD);            rootElement.appendChild(expressionResults);            for (String result : resultList) {                Element expressionResult = document.createElement(EXPRESSION_RESULT);                expressionResults.appendChild(expressionResult);                Element expResult = document.createElement(RESULT);                expResult.appendChild(document.createTextNode(result));                expressionResult.appendChild(expResult);            }            TransformerFactory transformerFactory = TransformerFactory.newInstance();            Transformer transformer = transformerFactory.newTransformer();            DOMSource source = new DOMSource(document);            StreamResult result = new StreamResult(new File(path.toString()));            transformer.setOutputProperty(OutputKeys.INDENT, "yes");            transformer.setOutputProperty(OutputKeys.STANDALONE, "yes");            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");            transformer.transform(source, result);            logger.info("File's successfully written");        } catch (ParserConfigurationException e) {            logger.error("ParserConfigurationException\n", e);        } catch (TransformerException e) {            logger.error("TransformerException\n", e);        }    }}