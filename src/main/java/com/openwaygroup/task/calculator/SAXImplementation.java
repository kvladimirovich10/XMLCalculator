package com.openwaygroup.task.calculator;import org.xml.sax.helpers.DefaultHandler;import org.xml.sax.*;import javax.xml.parsers.ParserConfigurationException;import javax.xml.parsers.SAXParser;import javax.xml.parsers.SAXParserFactory;import java.io.IOException;import java.util.*;class SAXImplementation {    static LinkedList SAXParser(String path) throws ParserConfigurationException, SAXException, IOException {        SAXParserFactory spf = SAXParserFactory.newInstance();        SAXParser saxParser = spf.newSAXParser();        XMLReader xmlReader = saxParser.getXMLReader();        Parser parser = new Parser();        xmlReader.setContentHandler(parser);        xmlReader.parse(path);        return parser.getExpressionList();    }}final class Parser extends DefaultHandler {    private static final String ARGUMENT = "arg";    private static final String OPERATION = "operation";    private static final String EXPRESSION = "expression";    private static final String OPERATION_TYPE = "OperationType";    private static String currentElement;    private LinkedList<LinkedList<String>> expressionList;    @Override    public void startDocument() throws SAXException {        expressionList = new LinkedList<>();    }    @Override    public void startElement(String url,                             String localName,                             String qName,                             Attributes attributes) throws SAXException {        currentElement = qName;        switch (qName) {            case EXPRESSION: {                expressionList.add(new LinkedList<>());                break;            }            case OPERATION: {                expressionList.getLast().add(attributes.getValue(OPERATION_TYPE));            }            default: {            }        }    }    @Override    public void characters(char[] ch,                           int start,                           int length) {        String text = new String(ch, start, length);        text = text.replaceAll("\\s+", "");        if (text.contains("<") || currentElement == null || Objects.equals(text, ""))            return;        switch (currentElement) {            case ARGUMENT: {                expressionList.getLast().add(text);            }            default: {            }        }    }    @Override    public void endDocument() throws SAXException {        for (LinkedList list : getExpressionList()) {            for (Object str : list) {                System.out.print(str + " ");            }            System.out.println();        }    }    LinkedList<LinkedList<String>> getExpressionList() {        return expressionList;    }}